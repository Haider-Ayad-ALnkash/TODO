{"version":3,"sources":["components/type.js","reducers/reduce.js","components/App.js","actions/index.js","index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDERS","reminders","state","action","read_cookie","type","text","date","id","Math","random","bake_cookie","filter","reminder","App","Date","range","render_Reminders","props","className","map","moment","fromNow","for","onClick","remove_Reminder","placeholder","onChange","e","setState","target","value","this","add_Reminder","clear_allTasks","Component","connect","store","createStore","reactDom","render","document","getElementById"],"mappings":"2LAAaA,EAAa,eACbC,EAAgB,kBAChBC,EAAgB,kB,OCmBdC,EAnBC,WAAsB,IAArBC,EAAoB,uDAAd,GAAKC,EAAS,uCAC7BF,EAAU,KAEd,OADAC,EAAME,sBAAY,aACdD,EAAOE,OAASP,GAChBG,EAAU,GAAD,mBAAKC,GAAL,CAAW,CAACI,KAAKH,EAAOG,KAAKC,KAAKJ,EAAOI,KAAKC,GAAGC,KAAKC,YAC/DC,sBAAY,YAAYV,GACjBA,GACFE,EAAOE,OAASN,GACrBE,EAAUC,EAAMU,QAAO,SAAAC,GAAQ,OAAEA,EAASL,KAAOL,EAAOK,MACxDG,sBAAY,YAAYV,GACjBA,GACFE,EAAOE,OAASL,GACrBC,EAAU,GACVU,sBAAY,YAAYV,GACjBA,GAEAC,G,sDCbTY,E,4MACFZ,MAAM,CACFI,KAAK,GACLC,KAAMQ,OACLC,MAAM,I,EAEXC,iBAAmB,WACf,IAAOhB,EAAa,EAAKiB,MAAlBjB,UACP,OACQ,oBAAIkB,UAAU,aAAd,SAEIlB,EAAUmB,KAAI,SAAAP,GAEV,OACI,oBAAsBM,UAAU,kBAAhC,SACI,sBAAKA,UAAU,yCAAf,UACI,sBAAKA,UAAU,uCAAf,UACA,oBAAIA,UAAU,OAAd,SAAsBN,EAASP,OAC/B,uBAAOa,UAAU,aAAjB,SAAgCE,IAAO,IAAIN,KAAKF,EAASN,OAAOe,eAEhE,oBAAGH,UAAU,OAAb,UACK,uBAAOI,IAAI,eAAeJ,UAAU,aAApC,iFACA,uBAAOd,KAAK,QAAQc,UAAU,aAAaX,GAAG,oBAEnD,uBAAOW,UAAU,aAAjB,SACI,qBAAKA,UAAU,wBAAwBK,QAAS,kBAAI,EAAKN,MAAMO,gBAAgBZ,EAASL,KAAxF,qBAXHK,EAASL,U,4CAqB1C,WAAS,IAAD,OACJ,OACA,sBAAKW,UAAU,gBAAf,UAEI,qBAAKA,UAAU,iBAAf,SACI,oBAAIA,UAAU,cAAd,mCAEA,uBACIA,UAAU,eACVd,KAAK,OACLqB,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAK,EAAKC,SAAS,CAACvB,KAAKsB,EAAEE,OAAOC,SAC5CA,MAAOC,KAAK9B,MAAMI,OAEtB,uBACIa,UAAU,eACVd,KAAK,iBACLsB,SAAU,SAACC,GAAD,OAAK,EAAKC,SAAS,CAACtB,KAAKqB,EAAEE,OAAOC,SAC5CA,MAAOC,KAAK9B,MAAMK,OAEtB,wBAAQY,UAAU,4BACVK,QAAS,WACJ,EAAKN,MAAMe,aAAa,EAAK/B,MAAMI,KAAK,EAAKJ,MAAMK,MAChD,EAAKsB,SAAS,CAACvB,KAAK,GAAGC,KAAKQ,KAAK,QAHjD,sBASA,wBAAQI,UAAU,2BAA2BK,QAAS,kBAAI,EAAKN,MAAMgB,kBAArE,+BAEIF,KAAKf,0B,GAlEPkB,aAwEHC,eAAS,SAAAlC,GAAS,MAAM,CAACD,UAAUC,KAAS,CAAC+B,aC1ElC,SAAC3B,EAAKC,GAMxB,MALa,CACTF,KAAMP,EACNQ,OACAC,SDsE6DkB,gBClE5C,SAACjB,GAK1B,MAJa,CACTH,KAAKN,EACLS,OD+DiF0B,eC3D7D,WAExB,MADa,CAAC7B,KAAKL,KD0DRoC,CAA2FtB,GEpEpGuB,EAAMC,YAAYzB,GAExB0B,IAASC,OAAO,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SAAwB,cAAC,EAAD,MAAkBI,SAASC,eAAe,W","file":"static/js/main.3c914b79.chunk.js","sourcesContent":["export const ADD_REMINDER='ADD_REMINDER';\r\nexport const REMOVE_REMINDER='REMOVE_REMINDER';\r\nexport const CLEAR_REMINDERS='CLEAR_REMINDERS';","import { ADD_REMINDER, CLEAR_REMINDERS, REMOVE_REMINDER } from \"../components/type\";\r\nimport { bake_cookie, read_cookie } from 'sfcookies'\r\nconst reminders=(state=[] , action)=>{\r\n    let reminders=null;\r\n    state=read_cookie('reminders')\r\n    if (action.type === ADD_REMINDER) {\r\n        reminders=[...state,{text:action.text,date:action.date,id:Math.random()} ]\r\n        bake_cookie('reminders',reminders);\r\n        return reminders\r\n    }else if(action.type === REMOVE_REMINDER){\r\n        reminders=state.filter(reminder=>reminder.id !== action.id)\r\n        bake_cookie('reminders',reminders);\r\n        return reminders\r\n    }else if(action.type === CLEAR_REMINDERS){\r\n        reminders=[]\r\n        bake_cookie('reminders',reminders);\r\n        return reminders\r\n    }else{\r\n        return state\r\n    }\r\n}\r\nexport default reminders","import moment from \"moment\";\r\nimport { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { add_Reminder ,remove_Reminder,clear_allTasks} from \"../actions\";\r\nclass App extends Component{\r\n    state={\r\n        text:'',\r\n        date: Date(),\r\n         range:''\r\n    }\r\n    render_Reminders = () =>{\r\n        const {reminders} = this.props;\r\n        return(\r\n                <ul className=\"list-group\">\r\n                {\r\n                    reminders.map(reminder=>{\r\n                    \r\n                        return(\r\n                            <li key={reminder.id} className='list-group-item'>\r\n                                <div className=\"list-group-item list-group-item-action\">\r\n                                    <div className=\"d-flex w-100 justify-content-between\">\r\n                                    <h5 className=\"mb-1\">{reminder.text}</h5>\r\n                                    <small className=\"text-muted\">{ moment(new Date(reminder.date)).fromNow() }</small>\r\n                                    </div>\r\n                                    <p className=\"mb-1\">\r\n                                         <label for=\"customRange1\" className=\"form-label\">مستوى التقدم</label>\r\n                                         <input type=\"range\" className=\"form-range\" id=\"customRange1\" ></input>\r\n                                    </p>\r\n                                    <small className=\"text-muted\">\r\n                                        <div className=\"remove btn btn-danger\" onClick={()=>this.props.remove_Reminder(reminder.id)} >X</div>\r\n                                    </small>\r\n                                </div>      \r\n                              </li>\r\n                                )\r\n                            })\r\n                        }\r\n                 </ul>\r\n        )\r\n    }\r\n    render(){\r\n        return(\r\n        <div className=\"App container\">\r\n            {/* <imag src=\"\" /> */}\r\n            <div className=\"reminder-title\">\r\n                <h2 className=\"text-center\">What Should U Do ? </h2>\r\n                </div>\r\n                <input \r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Your Task\"\r\n                    onChange={(e)=>this.setState({text:e.target.value})}\r\n                    value={this.state.text}\r\n                />\r\n                <input\r\n                    className=\"form-control\" \r\n                    type=\"datetime-local\"\r\n                    onChange={(e)=>this.setState({date:e.target.value})}\r\n                    value={this.state.date}\r\n                />\r\n                <button className=\"btn btn-primary btn-block\" \r\n                        onClick={()=>\r\n                            {this.props.add_Reminder(this.state.text,this.state.date)\r\n                                this.setState({text:'',date:Date('y')})\r\n                        }} \r\n                        >\r\n                        Add Task\r\n                </button>\r\n                    \r\n                <button className=\"btn btn-danger btn-block\" onClick={()=>this.props.clear_allTasks()}>Delete All Tasks </button>\r\n                {\r\n                    this.render_Reminders()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect( state =>{return{reminders:state}} ,{add_Reminder,remove_Reminder,clear_allTasks})(App);","\r\nimport { ADD_REMINDER ,CLEAR_REMINDERS,REMOVE_REMINDER} from \"../components/type\"\r\n\r\nexport const add_Reminder=(text,date)=>{\r\n        const action={\r\n            type: ADD_REMINDER,\r\n            text,\r\n            date\r\n        } \r\n        return action\r\n}\r\nexport const remove_Reminder=(id)=>{\r\n    const action={\r\n        type:REMOVE_REMINDER,\r\n        id\r\n    }  \r\n    return action\r\n}\r\nexport const clear_allTasks=()=>{\r\n    const action={type:CLEAR_REMINDERS}\r\n    return action\r\n}","import React from 'react';\nimport reactDom from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reminder from './reducers/reduce';\nimport App from './components/App';\n\nconst store=createStore(reminder);\n\nreactDom.render(<Provider store={store}><App/></Provider>,document.getElementById('root'))"],"sourceRoot":""}